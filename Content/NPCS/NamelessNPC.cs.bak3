using Terraria;
using Terraria.ID;
using Terraria.ModLoader;
using Terraria.GameContent.Bestiary;
using Terraria.Localization;
using System.Collections.Generic;
using Terraria.GameContent; // Added this using directive
using Terraria.GameContent.Shop; // Required for ShopDatabase and ItemShopCondition (if they exist in your version)

// Add using directives for your item, buff, projectile, and biome namespaces
using Spiritrum.Content.Items; // For EchoCharm and NamelessEmblem (assuming they are here)
using Spiritrum.Content.Items.Weapons; // For WhisperingBlade (assuming it is here)
using Spiritrum.Content.Items.Consumables; // For ShimmeringDust (assuming it is here)
using Spiritrum.Content.Buffs; // For EchoCharmBuff and ShimmeringDustBuff (assuming they are here)
using Spiritrum.Content.Projectiles; // For WhisperingBladeProjectile (assuming it is here)
using Spiritrum.Content.Biomes; // For AetherBiome (assuming it is here)


namespace Spiritrum.Content.NPCS // Using the namespace you provided
{
    // This class defines the Nameless NPC
    [AutoloadHead] // This attribute automatically loads the NPC's head texture
    public class NamelessNPC : ModNPC
    {
        public override void SetStaticDefaults()
        {
            // Set the NPC's name - Handled via localization files (.hjson)
            // DisplayName.SetDefaults("The Nameless"); // This line is removed

            // These are for the bestiary
            Main.npcFrameCount[NPC.type] = 25; // Number of frames in the NPC's walking animation (adjust if needed)

            // Optional: uncomment and adjust if needed for custom animations or behavior sets
            // Note: NPCID.Sets properties like ExtraFramesCount, AttackFrameCount, DangerDetectRange, etc.
            // are generally still valid. The errors were on properties like NPCImmunity, IsTownNPC etc.
            // NPCID.Sets.ExtraFramesCount[Type] = 9; // For extra frames like weapon holding (adjust)
            // NPCID.Sets.AttackFrameCount[Type] = 4; // For attack frames (adjust)
            // NPCID.Sets.DangerDetectRange[Type] = 700; // How far the NPC looks for danger (adjust)
            // NPCID.Sets.AttackType[Type] = 0; // 0 = melee, 1 = ranged, 2 = magic, 3 = summon (adjust)
            // NPCID.Sets.AttackSpeed[Type] = 0.8f; // Attack speed (adjust)
            // NPCID.Sets.AttackTime[Type] = 40; // Time between attacks (adjust)
            // NPCID.Sets.AttackAverageChance[Type] = 30; // Chance to attack (adjust)
            // NPCID.Sets.HatOffsetY[Type] = 4; // Adjusts hat position (adjust)

            // Town NPCs are immune to all debuffs by default - This property seems outdated, removed based on error log.
            // NPCID.Sets.NPCImmunity[Type] = true; // Removed
            // Town NPCs usually can't take damage unless attacked by player - This property seems outdated, removed based on error log.
            // NPCID.Sets.CantTakeDamage[Type] = true; // Removed

            // Set the NPC's town NPC capabilities - These properties seem outdated, removed based on error log.
            // NPCID.Sets.IsTownNPC[Type] = true; // Removed
            // NPCID.Sets.AllowSharingDeliciousHairStyles[Type] = true; // Removed
            // NPCID.Sets.ActsLikeTownNPC[Type] = true; // Removed
            // NPCID.Sets.SpawnsWithCustomName[Type] = true; // Removed

            // The town NPC flags are usually set directly in SetDefaults or are inherent to ModNPC if AIStyle is town NPC.
            // Check tModLoader documentation for how these specific sets are handled in your version if needed.


            // Set the NPC's preferred housing biome and tiles (if any)
            // You would add conditions here if the NPC had specific housing requirements
            // Example: NPCID.Sets.PreferredBiome[Type] = BiomeID.Forest;
            // Example: NPCID.Sets.ExtraHousingRequirements[Type] = new HousingRequirement(new TileRequirement(TileID.WorkBenches));

            // Since this NPC has no spawn conditions, we don't need specific spawn code here,
            // tModLoader handles basic town NPC spawning if IsTownNPC is true (often set in SetDefaults).

            // You can set the display name here using Language.GetTextValue if needed for code logic,
            // but it's primarily for localization files.
            // DisplayName.SetDefault("The Nameless"); // Example using SetDefault (older syntax, but might work depending on version)
            // Or for newer versions, rely on localization files and access like NPC.DisplayName.GetTranslation()
        }

        public override void SetDefaults()
        {
            NPC.townNPC = true; // Set the NPC as a town NPC
            NPC.friendly = true; // NPC is friendly
            NPC.width = 18; // NPC hitbox width (adjust based on sprite)
            NPC.height = 40; // NPC hitbox height (adjust based on sprite)
            NPC.aiStyle = 7; // Use the standard town NPC AI style
            NPC.damage = 10; // Damage (town NPCs can defend themselves)
            NPC.defense = 15; // Defense
            NPC.lifeMax = 250; // Maximum health
            NPC.HitSound = SoundID.NPCHit1; // Sound when hit
            NPC.DeathSound = SoundID.NPCDeath1; // Sound when dies
            NPC.knockBackResist = 0.5f; // Knockback resistance
            // Optional: adjust rarity and value
            // NPC.rarity = 1;
            // NPC.value = 100f;

            // Set the NPC's town NPC specific properties
            AnimationType = NPCID.Guide; // Use the Guide's animation (adjust if you have custom animations)
            // The 'benevolent' property seems outdated, removed based on error log.
            // NPC.benevolent = true; // Removed
        }

        public override void SetBestiary(BestiaryDatabase database, BestiaryEntry bestiaryEntry)
        {
            // Add the NPC's description to the bestiary
            bestiaryEntry.Info.AddRange(new IBestiaryInfoElement[] {
                // Example spawn condition (remove or change as needed since this NPC has no specific conditions)
                // BestiaryDatabaseNPCsPopulator.CommonTags.SpawnConditions.Biomes.Surface,
                new FlavorTextBestiaryInfoElement("A mysterious figure with no name, offering unique wares to those who seek them out."), // NPC's flavor text
            });
        }

        public override string GetChat()
        {
            // You would add different dialogue options here based on conditions (time, boss defeated, etc.)
            switch (Main.rand.Next(3)) // Randomly choose one of 3 dialogue options
            {
                case 0:
                    return "Greetings, traveler. My name is... well, I don't seem to have one. But I have things you might find useful.";
                case 1:
                    return "The world is ever-changing. My inventory changes with it.";
                case 2:
                    return "Need something? Take a look. I acquire things from places most wouldn't dare to tread.";
                default:
                    return "Hello.";
            }
        }

        // This method is used to add items to the NPC's shop based on conditions.
        // This is the correct method to override for conditional shop inventory.
        // Note: If ShopDatabase or ItemShopCondition cause CS0246/CS0103 errors,
        // the Terraria.GameContent.Shop namespace might not be accessible or the types
        // might be named differently in your tModLoader version.
        public override void AddShopApprovals(NPC npc, ShopDatabase shop, bool includeDryad)
        {
            // Add items to the shop based on game progression

            // Echo Charm - Available after Skeletron
            // Note: NPC.downedBoss_1 seems outdated. Using WorldGen.downedSkeletron.
            // Check your tModLoader version's API for the correct boss downed flags.
            if (WorldGen.downedSkeletron) // Check if Skeletron has been defeated
            {
                 // Add the item to the shop. Use Item.buyPrice to set the price.
                 // Note: ItemShopCondition.SkeletronDefeated might not exist or be named differently.
                 // If ItemShopCondition causes CS0103, remove .SetCondition(...) or find the correct condition type.
                 shop.GetShopSlot(Type, ItemID.None).SetCondition(ItemShopCondition.SkeletronDefeated).Add<EchoCharm>(Item.buyPrice(gold: 5));
            }

            // Shimmering Dust - Available after entering Hardmode AND in the Aether
            // Assuming AetherBiome is a custom ModBiome you have defined elsewhere in your mod
            // Note: If AetherBiome causes CS0246, ensure the file exists and the namespace is correct.
            // If ItemShopCondition.InAether causes CS0103, remove .SetCondition(...) or find the correct condition type.
            if (Main.hardMode && Main.LocalPlayer.InModBiome<AetherBiome>()) // Check Hardmode and Aether biome
            {
                 shop.GetShopSlot(Type, ItemID.None).Add<ShimmeringDust>(Item.buyPrice(silver: 50));
            }
             // If you want the item to appear *only* when in the Aether, even after Hardmode,
             // you might need a custom ItemShopCondition or GlobalNPC hook.
             // The above code adds it if Hardmode is on AND the player is *currently* in the Aether when the shop is opened.


            // Nameless Emblem - Available post-Mech Bosses
            // Note: NPC.downedMechBossAny seems outdated. Using WorldGen.downedMechBossAny.
            // Check your tModLoader version's API for the correct boss downed flags.
            if (WorldGen.downedMechBossAny) // Check if any Mechanical Boss has been defeated
            {
                 // Note: ItemShopCondition.AnyMechBossDefeated might not exist or be named differently.
                 // If ItemShopCondition causes CS0103, remove .SetCondition(...) or find the correct condition type.
                 shop.GetShopSlot(Type, ItemID.None).SetCondition(ItemShopCondition.AnyMechBossDefeated).Add<NamelessEmblem>(Item.buyPrice(platinum: 1));
            }

            // Whispering Blade - Available Post-Plantera
            // Note: NPC.downedPlantBoss seems outdated. Using WorldGen.downedPlantBoss.
            // Check your tModLoader version's API for the correct boss downed flags.
            if (WorldGen.downedPlantBoss) // Check if Plantera has been defeated
            {
                 // Note: ItemShopCondition.PlanteraDefeated might not exist or be named differently.
                 // If ItemShopCondition causes CS0103, remove .SetCondition(...) or find the correct condition type.
                 shop.GetShopSlot(Type, ItemID.None).SetCondition(ItemShopCondition.PlanteraDefeated).Add<WhisperingBlade>(Item.buyPrice(gold: 50));
            }

            // You can also add items that are always sold
            // shop.GetShopSlot(Type, ItemID.None).Add(ItemID.LesserHealingPotion);
        }


        // This method defines the NPC's town NPC conditions (when it can spawn)
        // Note: If this causes a CS0115 error, the signature might be different
        // or the method might not be intended for direct override in your version.
        // The signature 'public override bool CanTownNPCSpawn(int numTownNPCs, int livingTownNPCs)' is
        // standard in recent versions, so verify your tModLoader version's API.
        public override bool CanTownNPCSpawn(int numTownNPCs, int livingTownNPCs)
        {
            // This NPC has no specific spawn conditions, so it can always potentially spawn
            return true;
        }

        // This method defines the NPC's attack behavior (if they have one)
        // public override void TownNPCAttackStrength(ref int damage, ref float knockback) { /* ... */ }
        // public override void TownNPCAttackSwing(ref int itemWidth, ref int itemHeight) { /* ... */ }
        // public override void TownNPCAttackProj(ref int projType, ref int attackDelay) { /* ... */ }
        // public override void TownNPCAttackProjSpeed(ref float speed, ref float norProjSpeed) { /* ... */ }

        // You would add code here for custom AI if needed, but AIStyle 7 is usually sufficient for a basic town NPC
        // public override void AI() { /* ... */ }

        // You would add code here for custom drawing if needed
        // public override void DrawEffects(ref Color drawColor) { /* ... */ }
    }

    // You would need to define the AetherBiome if it's a custom biome
    // This class should be in its own file (e.g., AetherBiome.cs) in the Spiritrum.Content.Biomes namespace.
    /*
    using Terraria.ModLoader;
    using Terraria.ID;
    using Terraria;
    using Microsoft.Xna.Framework;
    using Terraria.GameContent.Events; // For accessing vanilla biomes like Aether

    namespace Spiritrum.Content.Biomes // Example namespace for biomes
    {
        public class AetherBiome : ModBiome
        {
            public override int BiomeTorchItemType => ItemID.BlueTorch; // Example torch
            public override int BiomeCampfireItemType => ItemID.Campfire; // Example campfire
            public override string BestiaryIcon => "Spiritrum/Assets/Biomes/AetherBiomeIcon"; // Path to icon (adjust)
            public override string MapBackground => BackgroundTexture; // Path to map background (adjust)
            public override string MapColors => MapColor; // Map colors (adjust)

            public override bool IsBiomeActive(Player player)
            {
                // Define the conditions for being in the Aether biome
                // If you are using the vanilla Aether, you can check like this:
                return player.ZoneAether;

                // If it's a custom biome, you need your own logic
                // Example: Check for specific tiles or location
                // bool inCustomAether = false;
                // if (player.ZoneRockLayerHeight && (player.position.X < Main.maxTilesX * 0.1f * 16 || player.position.X > Main.maxTilesX * 0.9f * 16))
                // {
                //      inCustomAether = true; // Placeholder logic
                // }
                // // Add more specific checks here based on your biome's design
                // return inCustomAether;
            }
        }
    }
    */
}
