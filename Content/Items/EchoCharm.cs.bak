using Terraria;
using Terraria.ID;
using Terraria.ModLoader;
using Microsoft.Xna.Framework;
using System;

namespace Spiritrum.Content.Items // Replace YourModNamespace with your mod's actual namespace
{
    // This class defines the Echo Charm accessory
    public class EchoCharm : ModItem
    {
        public override void SetStaticDefaults()
        {
            // DisplayName.SetDefault("Echo Charm"); // Old way
            DisplayName.SetDefaults("Echo Charm"); // Set the item's name
            Tooltip.SetDefault("Grants a 15% chance to dodge an attack.\nUpon a successful dodge, emits a shadowy burst."); // Set the item's tooltip

            // This makes the item an accessory
            ItemID.Sets.IsACCESSORY[Type] = true;
        }

        public override void SetDefaults()
        {
            Item.width = 24; // Item texture width (adjust)
            Item.height = 24; // Item texture height (adjust)
            Item.accessory = true; // Mark as accessory
            Item.rare = ItemRarityID.Blue; // Set rarity (Blue is typically pre-Hardmode, Post-Skeletron)
            Item.value = Item.sellPrice(gold: 20); // Set sell price (adjust)
        }

        // This method applies the accessory's effects to the player
        public override void UpdateAccessory(Player player, bool hideVisual)
        {
            // Apply a custom buff or modify player properties to handle the dodge logic
            // A common way to handle dodge chance is through a GlobalAccessory or a custom Player class
            // For simplicity here, we'll illustrate the concept.
            // A better implementation would involve hooking into Terraria's damage system.

            // This is a simplified representation. Real dodge logic needs to intercept damage events.
            // You might need a GlobalAccessory or a custom ModPlayer class for robust implementation.

            // Example of applying a buff that handles the dodge logic
            player.AddBuff(ModContent.BuffType<EchoCharmBuff>(), 2); // Apply a buff that lasts 2 ticks (always active while equipped)
        }

        // You would need a ModBuff class to handle the dodge chance and effect
    }

    // This class defines the buff applied by the Echo Charm
    public class EchoCharmBuff : ModBuff
    {
        public override void SetStaticDefaults()
        {
            // DisplayName.SetDefault("Echo Charm Dodge"); // Old way
            DisplayName.SetDefaults("Echo Charm Dodge"); // Set buff name
            Description.SetDefault("15% chance to dodge attacks and release a shadowy burst."); // Set buff description
            Main.buffNoSave[Type] = true; // Buff doesn't save on logout
            Main.buffNoTimeDisplay[Type] = true; // Buff time is not displayed
        }

        // This method is called every tick while the player has the buff
        public override void Update(Player player, ref int buffIndex)
        {
            // This buff primarily acts as a marker. The actual dodge logic
            // is best handled by hooking into the player's Hurt method or using GlobalNPC/GlobalProjectile hooks.

            // Example (Conceptual):
            // In a GlobalNPC or ModPlayer class, you would override methods like PreHurt
            // and check if the player has this buff.
            // If they do, roll the 15% chance. If successful, cancel the damage and
            // trigger the shadowy burst effect.
        }
    }

    // You would likely need a GlobalNPC or ModPlayer class to implement the dodge logic
    // and the shadowy burst effect.
    // Example (Conceptual structure in a separate file, e.g., YourModPlayer.cs):
    /*
    using Terraria;
    using Terraria.ModLoader;
    using Microsoft.Xna.Framework;
    using System;

    namespace YourModNamespace
    {
        public class YourModPlayer : ModPlayer
        {
            // This method is called before the player takes damage
            public override bool PreHurt(bool pvp, bool quiet, ref int damage, ref int hitDirection, ref bool crit, ref bool customDamage, ref bool playSound, ref bool genGore, ref PlayerDeathReason damageReason)
            {
                // Check if the player has the Echo Charm buff (meaning the accessory is equipped)
                if (Player.HasBuff(ModContent.BuffType<EchoCharmBuff>()))
                {
                    // 15% chance to dodge
                    if (Main.rand.NextFloat() < 0.15f) // 0.15f = 15%
                    {
                        // Successful dodge!
                        playSound = false; // Prevent the default hit sound
                        genGore = false; // Prevent gore generation
                        // You might want to play a custom dodge sound here
                        // Example: Terraria.Audio.SoundEngine.PlaySound(SoundID.Dodge, Player.position);

                        // Trigger the shadowy burst effect
                        SpawnShadowyBurst(Player.Center);

                        // Cancel the damage
                        return false; // Returning false cancels the Hurt method
                    }
                }

                // If not dodged or buff not present, allow the damage to proceed
                return true;
            }

            // Method to spawn the shadowy burst effect
            private void SpawnShadowyBurst(Vector2 position)
            {
                // This is a placeholder for creating the visual and damage effect
                // You could spawn a custom projectile, create dust, or apply a debuff to nearby enemies.

                // Example: Spawn some shadowy dust
                for (int i = 0; i < 20; i++)
                {
                    Dust.NewDust(position - new Vector2(10, 10), 20, 20, DustID.Shadowflame, Main.rand.NextFloat(-2, 2), Main.rand.NextFloat(-2, 2), 0, default(Color), 1.5f);
                }

                // Example: Apply damage to nearby enemies
                float burstRadius = 150f; // Radius of the burst
                int burstDamage = 30; // Damage of the burst (adjust)
                // Iterate through active NPCs
                for (int i = 0; i < Main.maxNPCs; i++)
                {
                    NPC npc = Main.npc[i];
                    // Check if the NPC is active, not town NPC, not friendly, and within the burst radius
                    if (npc.active && !npc.townNPC && !npc.friendly && Vector2.Distance(position, npc.Center) < burstRadius)
                    {
                        // Deal damage to the NPC
                        // This applies damage as if from the player
                        int damage = burstDamage; // Base damage
                        float knockback = 2f; // Knockback (adjust)
                        bool crit = false; // Whether the hit is a crit (adjust if needed)
                        Player.StrikeNPC(npc, damage, knockback, Player.direction, crit);
                    }
                }
            }
        }
    }
    */
}
